export declare class EventService {
    private prisma;
    constructor();
    createEvent(data: {
        name: string;
        description?: string;
        venueId: string;
        organizerWallet: string;
        startTime: Date;
        endTime: Date;
        totalTickets: number;
        generalPrice: number;
        vipPrice: number;
        tiers?: any[];
    }): Promise<{
        id: any;
        eventId: any;
        blockchainAddress: any;
        organizerWallet: any;
        name: any;
        description: any;
        venueId: any;
        venue: any;
        startTime: any;
        endTime: any;
        totalTickets: any;
        ticketsSold: any;
        ticketsUsed: any;
        ticketsBurned: any;
        generalPrice: any;
        vipPrice: any;
        cancelled: any;
        transferable: any;
        transferFreezeTime: any;
        metadata: any;
        status: any;
        createdAt: any;
        updatedAt: any;
    }>;
    findAll(filters?: {
        organizerWallet?: string;
        venueId?: string;
        startDate?: Date;
        endDate?: Date;
        status?: string;
    }): Promise<{
        id: any;
        eventId: any;
        blockchainAddress: any;
        organizerWallet: any;
        name: any;
        description: any;
        venueId: any;
        venue: any;
        startTime: any;
        endTime: any;
        totalTickets: any;
        ticketsSold: any;
        ticketsUsed: any;
        ticketsBurned: any;
        generalPrice: any;
        vipPrice: any;
        cancelled: any;
        transferable: any;
        transferFreezeTime: any;
        metadata: any;
        status: any;
        createdAt: any;
        updatedAt: any;
    }[]>;
    findOne(id: string): Promise<{
        id: any;
        eventId: any;
        blockchainAddress: any;
        organizerWallet: any;
        name: any;
        description: any;
        venueId: any;
        venue: any;
        startTime: any;
        endTime: any;
        totalTickets: any;
        ticketsSold: any;
        ticketsUsed: any;
        ticketsBurned: any;
        generalPrice: any;
        vipPrice: any;
        cancelled: any;
        transferable: any;
        transferFreezeTime: any;
        metadata: any;
        status: any;
        createdAt: any;
        updatedAt: any;
    }>;
    update(id: string, data: any): Promise<{
        id: any;
        eventId: any;
        blockchainAddress: any;
        organizerWallet: any;
        name: any;
        description: any;
        venueId: any;
        venue: any;
        startTime: any;
        endTime: any;
        totalTickets: any;
        ticketsSold: any;
        ticketsUsed: any;
        ticketsBurned: any;
        generalPrice: any;
        vipPrice: any;
        cancelled: any;
        transferable: any;
        transferFreezeTime: any;
        metadata: any;
        status: any;
        createdAt: any;
        updatedAt: any;
    }>;
    cancel(id: string, reason: string): Promise<{
        id: any;
        eventId: any;
        blockchainAddress: any;
        organizerWallet: any;
        name: any;
        description: any;
        venueId: any;
        venue: any;
        startTime: any;
        endTime: any;
        totalTickets: any;
        ticketsSold: any;
        ticketsUsed: any;
        ticketsBurned: any;
        generalPrice: any;
        vipPrice: any;
        cancelled: any;
        transferable: any;
        transferFreezeTime: any;
        metadata: any;
        status: any;
        createdAt: any;
        updatedAt: any;
    }>;
    getCapacity(id: string): Promise<{
        total: number;
        sold: number;
        available: number;
        percentageSold: number;
    }>;
    syncFromBlockchain(id: string): Promise<{
        id: any;
        eventId: any;
        blockchainAddress: any;
        organizerWallet: any;
        name: any;
        description: any;
        venueId: any;
        venue: any;
        startTime: any;
        endTime: any;
        totalTickets: any;
        ticketsSold: any;
        ticketsUsed: any;
        ticketsBurned: any;
        generalPrice: any;
        vipPrice: any;
        cancelled: any;
        transferable: any;
        transferFreezeTime: any;
        metadata: any;
        status: any;
        createdAt: any;
        updatedAt: any;
    }>;
    findUpcoming(): Promise<{
        id: any;
        eventId: any;
        blockchainAddress: any;
        organizerWallet: any;
        name: any;
        description: any;
        venueId: any;
        venue: any;
        startTime: any;
        endTime: any;
        totalTickets: any;
        ticketsSold: any;
        ticketsUsed: any;
        ticketsBurned: any;
        generalPrice: any;
        vipPrice: any;
        cancelled: any;
        transferable: any;
        transferFreezeTime: any;
        metadata: any;
        status: any;
        createdAt: any;
        updatedAt: any;
    }[]>;
    private transformEvent;
}
