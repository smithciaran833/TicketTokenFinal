
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model WalletHistory
 * 
 */
export type WalletHistory = $Result.DefaultSelection<Prisma.$WalletHistoryPayload>
/**
 * Model MigrationJob
 * 
 */
export type MigrationJob = $Result.DefaultSelection<Prisma.$MigrationJobPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.walletHistory`: Exposes CRUD operations for the **WalletHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WalletHistories
    * const walletHistories = await prisma.walletHistory.findMany()
    * ```
    */
  get walletHistory(): Prisma.WalletHistoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.migrationJob`: Exposes CRUD operations for the **MigrationJob** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MigrationJobs
    * const migrationJobs = await prisma.migrationJob.findMany()
    * ```
    */
  get migrationJob(): Prisma.MigrationJobDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.10.1
   * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    WalletHistory: 'WalletHistory',
    MigrationJob: 'MigrationJob'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "walletHistory" | "migrationJob"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      WalletHistory: {
        payload: Prisma.$WalletHistoryPayload<ExtArgs>
        fields: Prisma.WalletHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WalletHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WalletHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletHistoryPayload>
          }
          findFirst: {
            args: Prisma.WalletHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WalletHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletHistoryPayload>
          }
          findMany: {
            args: Prisma.WalletHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletHistoryPayload>[]
          }
          create: {
            args: Prisma.WalletHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletHistoryPayload>
          }
          createMany: {
            args: Prisma.WalletHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WalletHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletHistoryPayload>[]
          }
          delete: {
            args: Prisma.WalletHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletHistoryPayload>
          }
          update: {
            args: Prisma.WalletHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletHistoryPayload>
          }
          deleteMany: {
            args: Prisma.WalletHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WalletHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WalletHistoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletHistoryPayload>[]
          }
          upsert: {
            args: Prisma.WalletHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletHistoryPayload>
          }
          aggregate: {
            args: Prisma.WalletHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWalletHistory>
          }
          groupBy: {
            args: Prisma.WalletHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<WalletHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.WalletHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<WalletHistoryCountAggregateOutputType> | number
          }
        }
      }
      MigrationJob: {
        payload: Prisma.$MigrationJobPayload<ExtArgs>
        fields: Prisma.MigrationJobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MigrationJobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MigrationJobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MigrationJobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MigrationJobPayload>
          }
          findFirst: {
            args: Prisma.MigrationJobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MigrationJobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MigrationJobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MigrationJobPayload>
          }
          findMany: {
            args: Prisma.MigrationJobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MigrationJobPayload>[]
          }
          create: {
            args: Prisma.MigrationJobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MigrationJobPayload>
          }
          createMany: {
            args: Prisma.MigrationJobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MigrationJobCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MigrationJobPayload>[]
          }
          delete: {
            args: Prisma.MigrationJobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MigrationJobPayload>
          }
          update: {
            args: Prisma.MigrationJobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MigrationJobPayload>
          }
          deleteMany: {
            args: Prisma.MigrationJobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MigrationJobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MigrationJobUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MigrationJobPayload>[]
          }
          upsert: {
            args: Prisma.MigrationJobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MigrationJobPayload>
          }
          aggregate: {
            args: Prisma.MigrationJobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMigrationJob>
          }
          groupBy: {
            args: Prisma.MigrationJobGroupByArgs<ExtArgs>
            result: $Utils.Optional<MigrationJobGroupByOutputType>[]
          }
          count: {
            args: Prisma.MigrationJobCountArgs<ExtArgs>
            result: $Utils.Optional<MigrationJobCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    walletHistory?: WalletHistoryOmit
    migrationJob?: MigrationJobOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    walletHistory: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    walletHistory?: boolean | UserCountOutputTypeCountWalletHistoryArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWalletHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WalletHistoryWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    phoneNumber: string | null
    walletPreference: string | null
    custodialWallet: string | null
    phantomWallet: string | null
    encryptedSeed: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    phoneNumber: string | null
    walletPreference: string | null
    custodialWallet: string | null
    phantomWallet: string | null
    encryptedSeed: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    phoneNumber: number
    walletPreference: number
    custodialWallet: number
    phantomWallet: number
    encryptedSeed: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    phoneNumber?: true
    walletPreference?: true
    custodialWallet?: true
    phantomWallet?: true
    encryptedSeed?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    phoneNumber?: true
    walletPreference?: true
    custodialWallet?: true
    phantomWallet?: true
    encryptedSeed?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    phoneNumber?: true
    walletPreference?: true
    custodialWallet?: true
    phantomWallet?: true
    encryptedSeed?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    phoneNumber: string | null
    walletPreference: string
    custodialWallet: string | null
    phantomWallet: string | null
    encryptedSeed: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    phoneNumber?: boolean
    walletPreference?: boolean
    custodialWallet?: boolean
    phantomWallet?: boolean
    encryptedSeed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    walletHistory?: boolean | User$walletHistoryArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    phoneNumber?: boolean
    walletPreference?: boolean
    custodialWallet?: boolean
    phantomWallet?: boolean
    encryptedSeed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    phoneNumber?: boolean
    walletPreference?: boolean
    custodialWallet?: boolean
    phantomWallet?: boolean
    encryptedSeed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    phoneNumber?: boolean
    walletPreference?: boolean
    custodialWallet?: boolean
    phantomWallet?: boolean
    encryptedSeed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "phoneNumber" | "walletPreference" | "custodialWallet" | "phantomWallet" | "encryptedSeed" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    walletHistory?: boolean | User$walletHistoryArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      walletHistory: Prisma.$WalletHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      phoneNumber: string | null
      walletPreference: string
      custodialWallet: string | null
      phantomWallet: string | null
      encryptedSeed: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    walletHistory<T extends User$walletHistoryArgs<ExtArgs> = {}>(args?: Subset<T, User$walletHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WalletHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly phoneNumber: FieldRef<"User", 'String'>
    readonly walletPreference: FieldRef<"User", 'String'>
    readonly custodialWallet: FieldRef<"User", 'String'>
    readonly phantomWallet: FieldRef<"User", 'String'>
    readonly encryptedSeed: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.walletHistory
   */
  export type User$walletHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletHistory
     */
    select?: WalletHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WalletHistory
     */
    omit?: WalletHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletHistoryInclude<ExtArgs> | null
    where?: WalletHistoryWhereInput
    orderBy?: WalletHistoryOrderByWithRelationInput | WalletHistoryOrderByWithRelationInput[]
    cursor?: WalletHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WalletHistoryScalarFieldEnum | WalletHistoryScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model WalletHistory
   */

  export type AggregateWalletHistory = {
    _count: WalletHistoryCountAggregateOutputType | null
    _min: WalletHistoryMinAggregateOutputType | null
    _max: WalletHistoryMaxAggregateOutputType | null
  }

  export type WalletHistoryMinAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    walletType: string | null
    walletAddress: string | null
    metadata: string | null
    createdAt: Date | null
  }

  export type WalletHistoryMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    walletType: string | null
    walletAddress: string | null
    metadata: string | null
    createdAt: Date | null
  }

  export type WalletHistoryCountAggregateOutputType = {
    id: number
    userId: number
    action: number
    walletType: number
    walletAddress: number
    metadata: number
    createdAt: number
    _all: number
  }


  export type WalletHistoryMinAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    walletType?: true
    walletAddress?: true
    metadata?: true
    createdAt?: true
  }

  export type WalletHistoryMaxAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    walletType?: true
    walletAddress?: true
    metadata?: true
    createdAt?: true
  }

  export type WalletHistoryCountAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    walletType?: true
    walletAddress?: true
    metadata?: true
    createdAt?: true
    _all?: true
  }

  export type WalletHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WalletHistory to aggregate.
     */
    where?: WalletHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WalletHistories to fetch.
     */
    orderBy?: WalletHistoryOrderByWithRelationInput | WalletHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WalletHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WalletHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WalletHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WalletHistories
    **/
    _count?: true | WalletHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WalletHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WalletHistoryMaxAggregateInputType
  }

  export type GetWalletHistoryAggregateType<T extends WalletHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateWalletHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWalletHistory[P]>
      : GetScalarType<T[P], AggregateWalletHistory[P]>
  }




  export type WalletHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WalletHistoryWhereInput
    orderBy?: WalletHistoryOrderByWithAggregationInput | WalletHistoryOrderByWithAggregationInput[]
    by: WalletHistoryScalarFieldEnum[] | WalletHistoryScalarFieldEnum
    having?: WalletHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WalletHistoryCountAggregateInputType | true
    _min?: WalletHistoryMinAggregateInputType
    _max?: WalletHistoryMaxAggregateInputType
  }

  export type WalletHistoryGroupByOutputType = {
    id: string
    userId: string
    action: string
    walletType: string
    walletAddress: string
    metadata: string | null
    createdAt: Date
    _count: WalletHistoryCountAggregateOutputType | null
    _min: WalletHistoryMinAggregateOutputType | null
    _max: WalletHistoryMaxAggregateOutputType | null
  }

  type GetWalletHistoryGroupByPayload<T extends WalletHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WalletHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WalletHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WalletHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], WalletHistoryGroupByOutputType[P]>
        }
      >
    >


  export type WalletHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    walletType?: boolean
    walletAddress?: boolean
    metadata?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["walletHistory"]>

  export type WalletHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    walletType?: boolean
    walletAddress?: boolean
    metadata?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["walletHistory"]>

  export type WalletHistorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    walletType?: boolean
    walletAddress?: boolean
    metadata?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["walletHistory"]>

  export type WalletHistorySelectScalar = {
    id?: boolean
    userId?: boolean
    action?: boolean
    walletType?: boolean
    walletAddress?: boolean
    metadata?: boolean
    createdAt?: boolean
  }

  export type WalletHistoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "action" | "walletType" | "walletAddress" | "metadata" | "createdAt", ExtArgs["result"]["walletHistory"]>
  export type WalletHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type WalletHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type WalletHistoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $WalletHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WalletHistory"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      action: string
      walletType: string
      walletAddress: string
      metadata: string | null
      createdAt: Date
    }, ExtArgs["result"]["walletHistory"]>
    composites: {}
  }

  type WalletHistoryGetPayload<S extends boolean | null | undefined | WalletHistoryDefaultArgs> = $Result.GetResult<Prisma.$WalletHistoryPayload, S>

  type WalletHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WalletHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WalletHistoryCountAggregateInputType | true
    }

  export interface WalletHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WalletHistory'], meta: { name: 'WalletHistory' } }
    /**
     * Find zero or one WalletHistory that matches the filter.
     * @param {WalletHistoryFindUniqueArgs} args - Arguments to find a WalletHistory
     * @example
     * // Get one WalletHistory
     * const walletHistory = await prisma.walletHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WalletHistoryFindUniqueArgs>(args: SelectSubset<T, WalletHistoryFindUniqueArgs<ExtArgs>>): Prisma__WalletHistoryClient<$Result.GetResult<Prisma.$WalletHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WalletHistory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WalletHistoryFindUniqueOrThrowArgs} args - Arguments to find a WalletHistory
     * @example
     * // Get one WalletHistory
     * const walletHistory = await prisma.walletHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WalletHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, WalletHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WalletHistoryClient<$Result.GetResult<Prisma.$WalletHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WalletHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletHistoryFindFirstArgs} args - Arguments to find a WalletHistory
     * @example
     * // Get one WalletHistory
     * const walletHistory = await prisma.walletHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WalletHistoryFindFirstArgs>(args?: SelectSubset<T, WalletHistoryFindFirstArgs<ExtArgs>>): Prisma__WalletHistoryClient<$Result.GetResult<Prisma.$WalletHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WalletHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletHistoryFindFirstOrThrowArgs} args - Arguments to find a WalletHistory
     * @example
     * // Get one WalletHistory
     * const walletHistory = await prisma.walletHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WalletHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, WalletHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__WalletHistoryClient<$Result.GetResult<Prisma.$WalletHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WalletHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WalletHistories
     * const walletHistories = await prisma.walletHistory.findMany()
     * 
     * // Get first 10 WalletHistories
     * const walletHistories = await prisma.walletHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const walletHistoryWithIdOnly = await prisma.walletHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WalletHistoryFindManyArgs>(args?: SelectSubset<T, WalletHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WalletHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WalletHistory.
     * @param {WalletHistoryCreateArgs} args - Arguments to create a WalletHistory.
     * @example
     * // Create one WalletHistory
     * const WalletHistory = await prisma.walletHistory.create({
     *   data: {
     *     // ... data to create a WalletHistory
     *   }
     * })
     * 
     */
    create<T extends WalletHistoryCreateArgs>(args: SelectSubset<T, WalletHistoryCreateArgs<ExtArgs>>): Prisma__WalletHistoryClient<$Result.GetResult<Prisma.$WalletHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WalletHistories.
     * @param {WalletHistoryCreateManyArgs} args - Arguments to create many WalletHistories.
     * @example
     * // Create many WalletHistories
     * const walletHistory = await prisma.walletHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WalletHistoryCreateManyArgs>(args?: SelectSubset<T, WalletHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WalletHistories and returns the data saved in the database.
     * @param {WalletHistoryCreateManyAndReturnArgs} args - Arguments to create many WalletHistories.
     * @example
     * // Create many WalletHistories
     * const walletHistory = await prisma.walletHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WalletHistories and only return the `id`
     * const walletHistoryWithIdOnly = await prisma.walletHistory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WalletHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, WalletHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WalletHistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WalletHistory.
     * @param {WalletHistoryDeleteArgs} args - Arguments to delete one WalletHistory.
     * @example
     * // Delete one WalletHistory
     * const WalletHistory = await prisma.walletHistory.delete({
     *   where: {
     *     // ... filter to delete one WalletHistory
     *   }
     * })
     * 
     */
    delete<T extends WalletHistoryDeleteArgs>(args: SelectSubset<T, WalletHistoryDeleteArgs<ExtArgs>>): Prisma__WalletHistoryClient<$Result.GetResult<Prisma.$WalletHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WalletHistory.
     * @param {WalletHistoryUpdateArgs} args - Arguments to update one WalletHistory.
     * @example
     * // Update one WalletHistory
     * const walletHistory = await prisma.walletHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WalletHistoryUpdateArgs>(args: SelectSubset<T, WalletHistoryUpdateArgs<ExtArgs>>): Prisma__WalletHistoryClient<$Result.GetResult<Prisma.$WalletHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WalletHistories.
     * @param {WalletHistoryDeleteManyArgs} args - Arguments to filter WalletHistories to delete.
     * @example
     * // Delete a few WalletHistories
     * const { count } = await prisma.walletHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WalletHistoryDeleteManyArgs>(args?: SelectSubset<T, WalletHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WalletHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WalletHistories
     * const walletHistory = await prisma.walletHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WalletHistoryUpdateManyArgs>(args: SelectSubset<T, WalletHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WalletHistories and returns the data updated in the database.
     * @param {WalletHistoryUpdateManyAndReturnArgs} args - Arguments to update many WalletHistories.
     * @example
     * // Update many WalletHistories
     * const walletHistory = await prisma.walletHistory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WalletHistories and only return the `id`
     * const walletHistoryWithIdOnly = await prisma.walletHistory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WalletHistoryUpdateManyAndReturnArgs>(args: SelectSubset<T, WalletHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WalletHistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WalletHistory.
     * @param {WalletHistoryUpsertArgs} args - Arguments to update or create a WalletHistory.
     * @example
     * // Update or create a WalletHistory
     * const walletHistory = await prisma.walletHistory.upsert({
     *   create: {
     *     // ... data to create a WalletHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WalletHistory we want to update
     *   }
     * })
     */
    upsert<T extends WalletHistoryUpsertArgs>(args: SelectSubset<T, WalletHistoryUpsertArgs<ExtArgs>>): Prisma__WalletHistoryClient<$Result.GetResult<Prisma.$WalletHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WalletHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletHistoryCountArgs} args - Arguments to filter WalletHistories to count.
     * @example
     * // Count the number of WalletHistories
     * const count = await prisma.walletHistory.count({
     *   where: {
     *     // ... the filter for the WalletHistories we want to count
     *   }
     * })
    **/
    count<T extends WalletHistoryCountArgs>(
      args?: Subset<T, WalletHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WalletHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WalletHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WalletHistoryAggregateArgs>(args: Subset<T, WalletHistoryAggregateArgs>): Prisma.PrismaPromise<GetWalletHistoryAggregateType<T>>

    /**
     * Group by WalletHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WalletHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WalletHistoryGroupByArgs['orderBy'] }
        : { orderBy?: WalletHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WalletHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWalletHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WalletHistory model
   */
  readonly fields: WalletHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WalletHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WalletHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WalletHistory model
   */
  interface WalletHistoryFieldRefs {
    readonly id: FieldRef<"WalletHistory", 'String'>
    readonly userId: FieldRef<"WalletHistory", 'String'>
    readonly action: FieldRef<"WalletHistory", 'String'>
    readonly walletType: FieldRef<"WalletHistory", 'String'>
    readonly walletAddress: FieldRef<"WalletHistory", 'String'>
    readonly metadata: FieldRef<"WalletHistory", 'String'>
    readonly createdAt: FieldRef<"WalletHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WalletHistory findUnique
   */
  export type WalletHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletHistory
     */
    select?: WalletHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WalletHistory
     */
    omit?: WalletHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletHistoryInclude<ExtArgs> | null
    /**
     * Filter, which WalletHistory to fetch.
     */
    where: WalletHistoryWhereUniqueInput
  }

  /**
   * WalletHistory findUniqueOrThrow
   */
  export type WalletHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletHistory
     */
    select?: WalletHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WalletHistory
     */
    omit?: WalletHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletHistoryInclude<ExtArgs> | null
    /**
     * Filter, which WalletHistory to fetch.
     */
    where: WalletHistoryWhereUniqueInput
  }

  /**
   * WalletHistory findFirst
   */
  export type WalletHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletHistory
     */
    select?: WalletHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WalletHistory
     */
    omit?: WalletHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletHistoryInclude<ExtArgs> | null
    /**
     * Filter, which WalletHistory to fetch.
     */
    where?: WalletHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WalletHistories to fetch.
     */
    orderBy?: WalletHistoryOrderByWithRelationInput | WalletHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WalletHistories.
     */
    cursor?: WalletHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WalletHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WalletHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WalletHistories.
     */
    distinct?: WalletHistoryScalarFieldEnum | WalletHistoryScalarFieldEnum[]
  }

  /**
   * WalletHistory findFirstOrThrow
   */
  export type WalletHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletHistory
     */
    select?: WalletHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WalletHistory
     */
    omit?: WalletHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletHistoryInclude<ExtArgs> | null
    /**
     * Filter, which WalletHistory to fetch.
     */
    where?: WalletHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WalletHistories to fetch.
     */
    orderBy?: WalletHistoryOrderByWithRelationInput | WalletHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WalletHistories.
     */
    cursor?: WalletHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WalletHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WalletHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WalletHistories.
     */
    distinct?: WalletHistoryScalarFieldEnum | WalletHistoryScalarFieldEnum[]
  }

  /**
   * WalletHistory findMany
   */
  export type WalletHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletHistory
     */
    select?: WalletHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WalletHistory
     */
    omit?: WalletHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletHistoryInclude<ExtArgs> | null
    /**
     * Filter, which WalletHistories to fetch.
     */
    where?: WalletHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WalletHistories to fetch.
     */
    orderBy?: WalletHistoryOrderByWithRelationInput | WalletHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WalletHistories.
     */
    cursor?: WalletHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WalletHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WalletHistories.
     */
    skip?: number
    distinct?: WalletHistoryScalarFieldEnum | WalletHistoryScalarFieldEnum[]
  }

  /**
   * WalletHistory create
   */
  export type WalletHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletHistory
     */
    select?: WalletHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WalletHistory
     */
    omit?: WalletHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a WalletHistory.
     */
    data: XOR<WalletHistoryCreateInput, WalletHistoryUncheckedCreateInput>
  }

  /**
   * WalletHistory createMany
   */
  export type WalletHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WalletHistories.
     */
    data: WalletHistoryCreateManyInput | WalletHistoryCreateManyInput[]
  }

  /**
   * WalletHistory createManyAndReturn
   */
  export type WalletHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletHistory
     */
    select?: WalletHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WalletHistory
     */
    omit?: WalletHistoryOmit<ExtArgs> | null
    /**
     * The data used to create many WalletHistories.
     */
    data: WalletHistoryCreateManyInput | WalletHistoryCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WalletHistory update
   */
  export type WalletHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletHistory
     */
    select?: WalletHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WalletHistory
     */
    omit?: WalletHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a WalletHistory.
     */
    data: XOR<WalletHistoryUpdateInput, WalletHistoryUncheckedUpdateInput>
    /**
     * Choose, which WalletHistory to update.
     */
    where: WalletHistoryWhereUniqueInput
  }

  /**
   * WalletHistory updateMany
   */
  export type WalletHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WalletHistories.
     */
    data: XOR<WalletHistoryUpdateManyMutationInput, WalletHistoryUncheckedUpdateManyInput>
    /**
     * Filter which WalletHistories to update
     */
    where?: WalletHistoryWhereInput
    /**
     * Limit how many WalletHistories to update.
     */
    limit?: number
  }

  /**
   * WalletHistory updateManyAndReturn
   */
  export type WalletHistoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletHistory
     */
    select?: WalletHistorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WalletHistory
     */
    omit?: WalletHistoryOmit<ExtArgs> | null
    /**
     * The data used to update WalletHistories.
     */
    data: XOR<WalletHistoryUpdateManyMutationInput, WalletHistoryUncheckedUpdateManyInput>
    /**
     * Filter which WalletHistories to update
     */
    where?: WalletHistoryWhereInput
    /**
     * Limit how many WalletHistories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WalletHistory upsert
   */
  export type WalletHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletHistory
     */
    select?: WalletHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WalletHistory
     */
    omit?: WalletHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the WalletHistory to update in case it exists.
     */
    where: WalletHistoryWhereUniqueInput
    /**
     * In case the WalletHistory found by the `where` argument doesn't exist, create a new WalletHistory with this data.
     */
    create: XOR<WalletHistoryCreateInput, WalletHistoryUncheckedCreateInput>
    /**
     * In case the WalletHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WalletHistoryUpdateInput, WalletHistoryUncheckedUpdateInput>
  }

  /**
   * WalletHistory delete
   */
  export type WalletHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletHistory
     */
    select?: WalletHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WalletHistory
     */
    omit?: WalletHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletHistoryInclude<ExtArgs> | null
    /**
     * Filter which WalletHistory to delete.
     */
    where: WalletHistoryWhereUniqueInput
  }

  /**
   * WalletHistory deleteMany
   */
  export type WalletHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WalletHistories to delete
     */
    where?: WalletHistoryWhereInput
    /**
     * Limit how many WalletHistories to delete.
     */
    limit?: number
  }

  /**
   * WalletHistory without action
   */
  export type WalletHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletHistory
     */
    select?: WalletHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WalletHistory
     */
    omit?: WalletHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletHistoryInclude<ExtArgs> | null
  }


  /**
   * Model MigrationJob
   */

  export type AggregateMigrationJob = {
    _count: MigrationJobCountAggregateOutputType | null
    _avg: MigrationJobAvgAggregateOutputType | null
    _sum: MigrationJobSumAggregateOutputType | null
    _min: MigrationJobMinAggregateOutputType | null
    _max: MigrationJobMaxAggregateOutputType | null
  }

  export type MigrationJobAvgAggregateOutputType = {
    progress: number | null
    ticketsMigrated: number | null
    totalTickets: number | null
  }

  export type MigrationJobSumAggregateOutputType = {
    progress: number | null
    ticketsMigrated: number | null
    totalTickets: number | null
  }

  export type MigrationJobMinAggregateOutputType = {
    id: string | null
    migrationId: string | null
    userId: string | null
    fromWallet: string | null
    toWallet: string | null
    status: string | null
    progress: number | null
    ticketsMigrated: number | null
    totalTickets: number | null
    error: string | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MigrationJobMaxAggregateOutputType = {
    id: string | null
    migrationId: string | null
    userId: string | null
    fromWallet: string | null
    toWallet: string | null
    status: string | null
    progress: number | null
    ticketsMigrated: number | null
    totalTickets: number | null
    error: string | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MigrationJobCountAggregateOutputType = {
    id: number
    migrationId: number
    userId: number
    fromWallet: number
    toWallet: number
    status: number
    progress: number
    ticketsMigrated: number
    totalTickets: number
    error: number
    completedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MigrationJobAvgAggregateInputType = {
    progress?: true
    ticketsMigrated?: true
    totalTickets?: true
  }

  export type MigrationJobSumAggregateInputType = {
    progress?: true
    ticketsMigrated?: true
    totalTickets?: true
  }

  export type MigrationJobMinAggregateInputType = {
    id?: true
    migrationId?: true
    userId?: true
    fromWallet?: true
    toWallet?: true
    status?: true
    progress?: true
    ticketsMigrated?: true
    totalTickets?: true
    error?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MigrationJobMaxAggregateInputType = {
    id?: true
    migrationId?: true
    userId?: true
    fromWallet?: true
    toWallet?: true
    status?: true
    progress?: true
    ticketsMigrated?: true
    totalTickets?: true
    error?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MigrationJobCountAggregateInputType = {
    id?: true
    migrationId?: true
    userId?: true
    fromWallet?: true
    toWallet?: true
    status?: true
    progress?: true
    ticketsMigrated?: true
    totalTickets?: true
    error?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MigrationJobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MigrationJob to aggregate.
     */
    where?: MigrationJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MigrationJobs to fetch.
     */
    orderBy?: MigrationJobOrderByWithRelationInput | MigrationJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MigrationJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MigrationJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MigrationJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MigrationJobs
    **/
    _count?: true | MigrationJobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MigrationJobAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MigrationJobSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MigrationJobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MigrationJobMaxAggregateInputType
  }

  export type GetMigrationJobAggregateType<T extends MigrationJobAggregateArgs> = {
        [P in keyof T & keyof AggregateMigrationJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMigrationJob[P]>
      : GetScalarType<T[P], AggregateMigrationJob[P]>
  }




  export type MigrationJobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MigrationJobWhereInput
    orderBy?: MigrationJobOrderByWithAggregationInput | MigrationJobOrderByWithAggregationInput[]
    by: MigrationJobScalarFieldEnum[] | MigrationJobScalarFieldEnum
    having?: MigrationJobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MigrationJobCountAggregateInputType | true
    _avg?: MigrationJobAvgAggregateInputType
    _sum?: MigrationJobSumAggregateInputType
    _min?: MigrationJobMinAggregateInputType
    _max?: MigrationJobMaxAggregateInputType
  }

  export type MigrationJobGroupByOutputType = {
    id: string
    migrationId: string
    userId: string
    fromWallet: string
    toWallet: string
    status: string
    progress: number
    ticketsMigrated: number
    totalTickets: number
    error: string | null
    completedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: MigrationJobCountAggregateOutputType | null
    _avg: MigrationJobAvgAggregateOutputType | null
    _sum: MigrationJobSumAggregateOutputType | null
    _min: MigrationJobMinAggregateOutputType | null
    _max: MigrationJobMaxAggregateOutputType | null
  }

  type GetMigrationJobGroupByPayload<T extends MigrationJobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MigrationJobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MigrationJobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MigrationJobGroupByOutputType[P]>
            : GetScalarType<T[P], MigrationJobGroupByOutputType[P]>
        }
      >
    >


  export type MigrationJobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    migrationId?: boolean
    userId?: boolean
    fromWallet?: boolean
    toWallet?: boolean
    status?: boolean
    progress?: boolean
    ticketsMigrated?: boolean
    totalTickets?: boolean
    error?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["migrationJob"]>

  export type MigrationJobSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    migrationId?: boolean
    userId?: boolean
    fromWallet?: boolean
    toWallet?: boolean
    status?: boolean
    progress?: boolean
    ticketsMigrated?: boolean
    totalTickets?: boolean
    error?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["migrationJob"]>

  export type MigrationJobSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    migrationId?: boolean
    userId?: boolean
    fromWallet?: boolean
    toWallet?: boolean
    status?: boolean
    progress?: boolean
    ticketsMigrated?: boolean
    totalTickets?: boolean
    error?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["migrationJob"]>

  export type MigrationJobSelectScalar = {
    id?: boolean
    migrationId?: boolean
    userId?: boolean
    fromWallet?: boolean
    toWallet?: boolean
    status?: boolean
    progress?: boolean
    ticketsMigrated?: boolean
    totalTickets?: boolean
    error?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MigrationJobOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "migrationId" | "userId" | "fromWallet" | "toWallet" | "status" | "progress" | "ticketsMigrated" | "totalTickets" | "error" | "completedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["migrationJob"]>

  export type $MigrationJobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MigrationJob"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      migrationId: string
      userId: string
      fromWallet: string
      toWallet: string
      status: string
      progress: number
      ticketsMigrated: number
      totalTickets: number
      error: string | null
      completedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["migrationJob"]>
    composites: {}
  }

  type MigrationJobGetPayload<S extends boolean | null | undefined | MigrationJobDefaultArgs> = $Result.GetResult<Prisma.$MigrationJobPayload, S>

  type MigrationJobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MigrationJobFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MigrationJobCountAggregateInputType | true
    }

  export interface MigrationJobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MigrationJob'], meta: { name: 'MigrationJob' } }
    /**
     * Find zero or one MigrationJob that matches the filter.
     * @param {MigrationJobFindUniqueArgs} args - Arguments to find a MigrationJob
     * @example
     * // Get one MigrationJob
     * const migrationJob = await prisma.migrationJob.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MigrationJobFindUniqueArgs>(args: SelectSubset<T, MigrationJobFindUniqueArgs<ExtArgs>>): Prisma__MigrationJobClient<$Result.GetResult<Prisma.$MigrationJobPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MigrationJob that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MigrationJobFindUniqueOrThrowArgs} args - Arguments to find a MigrationJob
     * @example
     * // Get one MigrationJob
     * const migrationJob = await prisma.migrationJob.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MigrationJobFindUniqueOrThrowArgs>(args: SelectSubset<T, MigrationJobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MigrationJobClient<$Result.GetResult<Prisma.$MigrationJobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MigrationJob that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MigrationJobFindFirstArgs} args - Arguments to find a MigrationJob
     * @example
     * // Get one MigrationJob
     * const migrationJob = await prisma.migrationJob.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MigrationJobFindFirstArgs>(args?: SelectSubset<T, MigrationJobFindFirstArgs<ExtArgs>>): Prisma__MigrationJobClient<$Result.GetResult<Prisma.$MigrationJobPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MigrationJob that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MigrationJobFindFirstOrThrowArgs} args - Arguments to find a MigrationJob
     * @example
     * // Get one MigrationJob
     * const migrationJob = await prisma.migrationJob.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MigrationJobFindFirstOrThrowArgs>(args?: SelectSubset<T, MigrationJobFindFirstOrThrowArgs<ExtArgs>>): Prisma__MigrationJobClient<$Result.GetResult<Prisma.$MigrationJobPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MigrationJobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MigrationJobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MigrationJobs
     * const migrationJobs = await prisma.migrationJob.findMany()
     * 
     * // Get first 10 MigrationJobs
     * const migrationJobs = await prisma.migrationJob.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const migrationJobWithIdOnly = await prisma.migrationJob.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MigrationJobFindManyArgs>(args?: SelectSubset<T, MigrationJobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MigrationJobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MigrationJob.
     * @param {MigrationJobCreateArgs} args - Arguments to create a MigrationJob.
     * @example
     * // Create one MigrationJob
     * const MigrationJob = await prisma.migrationJob.create({
     *   data: {
     *     // ... data to create a MigrationJob
     *   }
     * })
     * 
     */
    create<T extends MigrationJobCreateArgs>(args: SelectSubset<T, MigrationJobCreateArgs<ExtArgs>>): Prisma__MigrationJobClient<$Result.GetResult<Prisma.$MigrationJobPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MigrationJobs.
     * @param {MigrationJobCreateManyArgs} args - Arguments to create many MigrationJobs.
     * @example
     * // Create many MigrationJobs
     * const migrationJob = await prisma.migrationJob.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MigrationJobCreateManyArgs>(args?: SelectSubset<T, MigrationJobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MigrationJobs and returns the data saved in the database.
     * @param {MigrationJobCreateManyAndReturnArgs} args - Arguments to create many MigrationJobs.
     * @example
     * // Create many MigrationJobs
     * const migrationJob = await prisma.migrationJob.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MigrationJobs and only return the `id`
     * const migrationJobWithIdOnly = await prisma.migrationJob.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MigrationJobCreateManyAndReturnArgs>(args?: SelectSubset<T, MigrationJobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MigrationJobPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MigrationJob.
     * @param {MigrationJobDeleteArgs} args - Arguments to delete one MigrationJob.
     * @example
     * // Delete one MigrationJob
     * const MigrationJob = await prisma.migrationJob.delete({
     *   where: {
     *     // ... filter to delete one MigrationJob
     *   }
     * })
     * 
     */
    delete<T extends MigrationJobDeleteArgs>(args: SelectSubset<T, MigrationJobDeleteArgs<ExtArgs>>): Prisma__MigrationJobClient<$Result.GetResult<Prisma.$MigrationJobPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MigrationJob.
     * @param {MigrationJobUpdateArgs} args - Arguments to update one MigrationJob.
     * @example
     * // Update one MigrationJob
     * const migrationJob = await prisma.migrationJob.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MigrationJobUpdateArgs>(args: SelectSubset<T, MigrationJobUpdateArgs<ExtArgs>>): Prisma__MigrationJobClient<$Result.GetResult<Prisma.$MigrationJobPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MigrationJobs.
     * @param {MigrationJobDeleteManyArgs} args - Arguments to filter MigrationJobs to delete.
     * @example
     * // Delete a few MigrationJobs
     * const { count } = await prisma.migrationJob.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MigrationJobDeleteManyArgs>(args?: SelectSubset<T, MigrationJobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MigrationJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MigrationJobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MigrationJobs
     * const migrationJob = await prisma.migrationJob.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MigrationJobUpdateManyArgs>(args: SelectSubset<T, MigrationJobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MigrationJobs and returns the data updated in the database.
     * @param {MigrationJobUpdateManyAndReturnArgs} args - Arguments to update many MigrationJobs.
     * @example
     * // Update many MigrationJobs
     * const migrationJob = await prisma.migrationJob.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MigrationJobs and only return the `id`
     * const migrationJobWithIdOnly = await prisma.migrationJob.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MigrationJobUpdateManyAndReturnArgs>(args: SelectSubset<T, MigrationJobUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MigrationJobPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MigrationJob.
     * @param {MigrationJobUpsertArgs} args - Arguments to update or create a MigrationJob.
     * @example
     * // Update or create a MigrationJob
     * const migrationJob = await prisma.migrationJob.upsert({
     *   create: {
     *     // ... data to create a MigrationJob
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MigrationJob we want to update
     *   }
     * })
     */
    upsert<T extends MigrationJobUpsertArgs>(args: SelectSubset<T, MigrationJobUpsertArgs<ExtArgs>>): Prisma__MigrationJobClient<$Result.GetResult<Prisma.$MigrationJobPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MigrationJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MigrationJobCountArgs} args - Arguments to filter MigrationJobs to count.
     * @example
     * // Count the number of MigrationJobs
     * const count = await prisma.migrationJob.count({
     *   where: {
     *     // ... the filter for the MigrationJobs we want to count
     *   }
     * })
    **/
    count<T extends MigrationJobCountArgs>(
      args?: Subset<T, MigrationJobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MigrationJobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MigrationJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MigrationJobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MigrationJobAggregateArgs>(args: Subset<T, MigrationJobAggregateArgs>): Prisma.PrismaPromise<GetMigrationJobAggregateType<T>>

    /**
     * Group by MigrationJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MigrationJobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MigrationJobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MigrationJobGroupByArgs['orderBy'] }
        : { orderBy?: MigrationJobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MigrationJobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMigrationJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MigrationJob model
   */
  readonly fields: MigrationJobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MigrationJob.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MigrationJobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MigrationJob model
   */
  interface MigrationJobFieldRefs {
    readonly id: FieldRef<"MigrationJob", 'String'>
    readonly migrationId: FieldRef<"MigrationJob", 'String'>
    readonly userId: FieldRef<"MigrationJob", 'String'>
    readonly fromWallet: FieldRef<"MigrationJob", 'String'>
    readonly toWallet: FieldRef<"MigrationJob", 'String'>
    readonly status: FieldRef<"MigrationJob", 'String'>
    readonly progress: FieldRef<"MigrationJob", 'Int'>
    readonly ticketsMigrated: FieldRef<"MigrationJob", 'Int'>
    readonly totalTickets: FieldRef<"MigrationJob", 'Int'>
    readonly error: FieldRef<"MigrationJob", 'String'>
    readonly completedAt: FieldRef<"MigrationJob", 'DateTime'>
    readonly createdAt: FieldRef<"MigrationJob", 'DateTime'>
    readonly updatedAt: FieldRef<"MigrationJob", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MigrationJob findUnique
   */
  export type MigrationJobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MigrationJob
     */
    select?: MigrationJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MigrationJob
     */
    omit?: MigrationJobOmit<ExtArgs> | null
    /**
     * Filter, which MigrationJob to fetch.
     */
    where: MigrationJobWhereUniqueInput
  }

  /**
   * MigrationJob findUniqueOrThrow
   */
  export type MigrationJobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MigrationJob
     */
    select?: MigrationJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MigrationJob
     */
    omit?: MigrationJobOmit<ExtArgs> | null
    /**
     * Filter, which MigrationJob to fetch.
     */
    where: MigrationJobWhereUniqueInput
  }

  /**
   * MigrationJob findFirst
   */
  export type MigrationJobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MigrationJob
     */
    select?: MigrationJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MigrationJob
     */
    omit?: MigrationJobOmit<ExtArgs> | null
    /**
     * Filter, which MigrationJob to fetch.
     */
    where?: MigrationJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MigrationJobs to fetch.
     */
    orderBy?: MigrationJobOrderByWithRelationInput | MigrationJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MigrationJobs.
     */
    cursor?: MigrationJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MigrationJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MigrationJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MigrationJobs.
     */
    distinct?: MigrationJobScalarFieldEnum | MigrationJobScalarFieldEnum[]
  }

  /**
   * MigrationJob findFirstOrThrow
   */
  export type MigrationJobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MigrationJob
     */
    select?: MigrationJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MigrationJob
     */
    omit?: MigrationJobOmit<ExtArgs> | null
    /**
     * Filter, which MigrationJob to fetch.
     */
    where?: MigrationJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MigrationJobs to fetch.
     */
    orderBy?: MigrationJobOrderByWithRelationInput | MigrationJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MigrationJobs.
     */
    cursor?: MigrationJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MigrationJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MigrationJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MigrationJobs.
     */
    distinct?: MigrationJobScalarFieldEnum | MigrationJobScalarFieldEnum[]
  }

  /**
   * MigrationJob findMany
   */
  export type MigrationJobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MigrationJob
     */
    select?: MigrationJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MigrationJob
     */
    omit?: MigrationJobOmit<ExtArgs> | null
    /**
     * Filter, which MigrationJobs to fetch.
     */
    where?: MigrationJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MigrationJobs to fetch.
     */
    orderBy?: MigrationJobOrderByWithRelationInput | MigrationJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MigrationJobs.
     */
    cursor?: MigrationJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MigrationJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MigrationJobs.
     */
    skip?: number
    distinct?: MigrationJobScalarFieldEnum | MigrationJobScalarFieldEnum[]
  }

  /**
   * MigrationJob create
   */
  export type MigrationJobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MigrationJob
     */
    select?: MigrationJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MigrationJob
     */
    omit?: MigrationJobOmit<ExtArgs> | null
    /**
     * The data needed to create a MigrationJob.
     */
    data: XOR<MigrationJobCreateInput, MigrationJobUncheckedCreateInput>
  }

  /**
   * MigrationJob createMany
   */
  export type MigrationJobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MigrationJobs.
     */
    data: MigrationJobCreateManyInput | MigrationJobCreateManyInput[]
  }

  /**
   * MigrationJob createManyAndReturn
   */
  export type MigrationJobCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MigrationJob
     */
    select?: MigrationJobSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MigrationJob
     */
    omit?: MigrationJobOmit<ExtArgs> | null
    /**
     * The data used to create many MigrationJobs.
     */
    data: MigrationJobCreateManyInput | MigrationJobCreateManyInput[]
  }

  /**
   * MigrationJob update
   */
  export type MigrationJobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MigrationJob
     */
    select?: MigrationJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MigrationJob
     */
    omit?: MigrationJobOmit<ExtArgs> | null
    /**
     * The data needed to update a MigrationJob.
     */
    data: XOR<MigrationJobUpdateInput, MigrationJobUncheckedUpdateInput>
    /**
     * Choose, which MigrationJob to update.
     */
    where: MigrationJobWhereUniqueInput
  }

  /**
   * MigrationJob updateMany
   */
  export type MigrationJobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MigrationJobs.
     */
    data: XOR<MigrationJobUpdateManyMutationInput, MigrationJobUncheckedUpdateManyInput>
    /**
     * Filter which MigrationJobs to update
     */
    where?: MigrationJobWhereInput
    /**
     * Limit how many MigrationJobs to update.
     */
    limit?: number
  }

  /**
   * MigrationJob updateManyAndReturn
   */
  export type MigrationJobUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MigrationJob
     */
    select?: MigrationJobSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MigrationJob
     */
    omit?: MigrationJobOmit<ExtArgs> | null
    /**
     * The data used to update MigrationJobs.
     */
    data: XOR<MigrationJobUpdateManyMutationInput, MigrationJobUncheckedUpdateManyInput>
    /**
     * Filter which MigrationJobs to update
     */
    where?: MigrationJobWhereInput
    /**
     * Limit how many MigrationJobs to update.
     */
    limit?: number
  }

  /**
   * MigrationJob upsert
   */
  export type MigrationJobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MigrationJob
     */
    select?: MigrationJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MigrationJob
     */
    omit?: MigrationJobOmit<ExtArgs> | null
    /**
     * The filter to search for the MigrationJob to update in case it exists.
     */
    where: MigrationJobWhereUniqueInput
    /**
     * In case the MigrationJob found by the `where` argument doesn't exist, create a new MigrationJob with this data.
     */
    create: XOR<MigrationJobCreateInput, MigrationJobUncheckedCreateInput>
    /**
     * In case the MigrationJob was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MigrationJobUpdateInput, MigrationJobUncheckedUpdateInput>
  }

  /**
   * MigrationJob delete
   */
  export type MigrationJobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MigrationJob
     */
    select?: MigrationJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MigrationJob
     */
    omit?: MigrationJobOmit<ExtArgs> | null
    /**
     * Filter which MigrationJob to delete.
     */
    where: MigrationJobWhereUniqueInput
  }

  /**
   * MigrationJob deleteMany
   */
  export type MigrationJobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MigrationJobs to delete
     */
    where?: MigrationJobWhereInput
    /**
     * Limit how many MigrationJobs to delete.
     */
    limit?: number
  }

  /**
   * MigrationJob without action
   */
  export type MigrationJobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MigrationJob
     */
    select?: MigrationJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MigrationJob
     */
    omit?: MigrationJobOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    phoneNumber: 'phoneNumber',
    walletPreference: 'walletPreference',
    custodialWallet: 'custodialWallet',
    phantomWallet: 'phantomWallet',
    encryptedSeed: 'encryptedSeed',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const WalletHistoryScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    action: 'action',
    walletType: 'walletType',
    walletAddress: 'walletAddress',
    metadata: 'metadata',
    createdAt: 'createdAt'
  };

  export type WalletHistoryScalarFieldEnum = (typeof WalletHistoryScalarFieldEnum)[keyof typeof WalletHistoryScalarFieldEnum]


  export const MigrationJobScalarFieldEnum: {
    id: 'id',
    migrationId: 'migrationId',
    userId: 'userId',
    fromWallet: 'fromWallet',
    toWallet: 'toWallet',
    status: 'status',
    progress: 'progress',
    ticketsMigrated: 'ticketsMigrated',
    totalTickets: 'totalTickets',
    error: 'error',
    completedAt: 'completedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MigrationJobScalarFieldEnum = (typeof MigrationJobScalarFieldEnum)[keyof typeof MigrationJobScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    phoneNumber?: StringNullableFilter<"User"> | string | null
    walletPreference?: StringFilter<"User"> | string
    custodialWallet?: StringNullableFilter<"User"> | string | null
    phantomWallet?: StringNullableFilter<"User"> | string | null
    encryptedSeed?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    walletHistory?: WalletHistoryListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    walletPreference?: SortOrder
    custodialWallet?: SortOrderInput | SortOrder
    phantomWallet?: SortOrderInput | SortOrder
    encryptedSeed?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    walletHistory?: WalletHistoryOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    phoneNumber?: StringNullableFilter<"User"> | string | null
    walletPreference?: StringFilter<"User"> | string
    custodialWallet?: StringNullableFilter<"User"> | string | null
    phantomWallet?: StringNullableFilter<"User"> | string | null
    encryptedSeed?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    walletHistory?: WalletHistoryListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    walletPreference?: SortOrder
    custodialWallet?: SortOrderInput | SortOrder
    phantomWallet?: SortOrderInput | SortOrder
    encryptedSeed?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    phoneNumber?: StringNullableWithAggregatesFilter<"User"> | string | null
    walletPreference?: StringWithAggregatesFilter<"User"> | string
    custodialWallet?: StringNullableWithAggregatesFilter<"User"> | string | null
    phantomWallet?: StringNullableWithAggregatesFilter<"User"> | string | null
    encryptedSeed?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type WalletHistoryWhereInput = {
    AND?: WalletHistoryWhereInput | WalletHistoryWhereInput[]
    OR?: WalletHistoryWhereInput[]
    NOT?: WalletHistoryWhereInput | WalletHistoryWhereInput[]
    id?: StringFilter<"WalletHistory"> | string
    userId?: StringFilter<"WalletHistory"> | string
    action?: StringFilter<"WalletHistory"> | string
    walletType?: StringFilter<"WalletHistory"> | string
    walletAddress?: StringFilter<"WalletHistory"> | string
    metadata?: StringNullableFilter<"WalletHistory"> | string | null
    createdAt?: DateTimeFilter<"WalletHistory"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type WalletHistoryOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    walletType?: SortOrder
    walletAddress?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type WalletHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WalletHistoryWhereInput | WalletHistoryWhereInput[]
    OR?: WalletHistoryWhereInput[]
    NOT?: WalletHistoryWhereInput | WalletHistoryWhereInput[]
    userId?: StringFilter<"WalletHistory"> | string
    action?: StringFilter<"WalletHistory"> | string
    walletType?: StringFilter<"WalletHistory"> | string
    walletAddress?: StringFilter<"WalletHistory"> | string
    metadata?: StringNullableFilter<"WalletHistory"> | string | null
    createdAt?: DateTimeFilter<"WalletHistory"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type WalletHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    walletType?: SortOrder
    walletAddress?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: WalletHistoryCountOrderByAggregateInput
    _max?: WalletHistoryMaxOrderByAggregateInput
    _min?: WalletHistoryMinOrderByAggregateInput
  }

  export type WalletHistoryScalarWhereWithAggregatesInput = {
    AND?: WalletHistoryScalarWhereWithAggregatesInput | WalletHistoryScalarWhereWithAggregatesInput[]
    OR?: WalletHistoryScalarWhereWithAggregatesInput[]
    NOT?: WalletHistoryScalarWhereWithAggregatesInput | WalletHistoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WalletHistory"> | string
    userId?: StringWithAggregatesFilter<"WalletHistory"> | string
    action?: StringWithAggregatesFilter<"WalletHistory"> | string
    walletType?: StringWithAggregatesFilter<"WalletHistory"> | string
    walletAddress?: StringWithAggregatesFilter<"WalletHistory"> | string
    metadata?: StringNullableWithAggregatesFilter<"WalletHistory"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"WalletHistory"> | Date | string
  }

  export type MigrationJobWhereInput = {
    AND?: MigrationJobWhereInput | MigrationJobWhereInput[]
    OR?: MigrationJobWhereInput[]
    NOT?: MigrationJobWhereInput | MigrationJobWhereInput[]
    id?: StringFilter<"MigrationJob"> | string
    migrationId?: StringFilter<"MigrationJob"> | string
    userId?: StringFilter<"MigrationJob"> | string
    fromWallet?: StringFilter<"MigrationJob"> | string
    toWallet?: StringFilter<"MigrationJob"> | string
    status?: StringFilter<"MigrationJob"> | string
    progress?: IntFilter<"MigrationJob"> | number
    ticketsMigrated?: IntFilter<"MigrationJob"> | number
    totalTickets?: IntFilter<"MigrationJob"> | number
    error?: StringNullableFilter<"MigrationJob"> | string | null
    completedAt?: DateTimeNullableFilter<"MigrationJob"> | Date | string | null
    createdAt?: DateTimeFilter<"MigrationJob"> | Date | string
    updatedAt?: DateTimeFilter<"MigrationJob"> | Date | string
  }

  export type MigrationJobOrderByWithRelationInput = {
    id?: SortOrder
    migrationId?: SortOrder
    userId?: SortOrder
    fromWallet?: SortOrder
    toWallet?: SortOrder
    status?: SortOrder
    progress?: SortOrder
    ticketsMigrated?: SortOrder
    totalTickets?: SortOrder
    error?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MigrationJobWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    migrationId?: string
    AND?: MigrationJobWhereInput | MigrationJobWhereInput[]
    OR?: MigrationJobWhereInput[]
    NOT?: MigrationJobWhereInput | MigrationJobWhereInput[]
    userId?: StringFilter<"MigrationJob"> | string
    fromWallet?: StringFilter<"MigrationJob"> | string
    toWallet?: StringFilter<"MigrationJob"> | string
    status?: StringFilter<"MigrationJob"> | string
    progress?: IntFilter<"MigrationJob"> | number
    ticketsMigrated?: IntFilter<"MigrationJob"> | number
    totalTickets?: IntFilter<"MigrationJob"> | number
    error?: StringNullableFilter<"MigrationJob"> | string | null
    completedAt?: DateTimeNullableFilter<"MigrationJob"> | Date | string | null
    createdAt?: DateTimeFilter<"MigrationJob"> | Date | string
    updatedAt?: DateTimeFilter<"MigrationJob"> | Date | string
  }, "id" | "migrationId">

  export type MigrationJobOrderByWithAggregationInput = {
    id?: SortOrder
    migrationId?: SortOrder
    userId?: SortOrder
    fromWallet?: SortOrder
    toWallet?: SortOrder
    status?: SortOrder
    progress?: SortOrder
    ticketsMigrated?: SortOrder
    totalTickets?: SortOrder
    error?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MigrationJobCountOrderByAggregateInput
    _avg?: MigrationJobAvgOrderByAggregateInput
    _max?: MigrationJobMaxOrderByAggregateInput
    _min?: MigrationJobMinOrderByAggregateInput
    _sum?: MigrationJobSumOrderByAggregateInput
  }

  export type MigrationJobScalarWhereWithAggregatesInput = {
    AND?: MigrationJobScalarWhereWithAggregatesInput | MigrationJobScalarWhereWithAggregatesInput[]
    OR?: MigrationJobScalarWhereWithAggregatesInput[]
    NOT?: MigrationJobScalarWhereWithAggregatesInput | MigrationJobScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MigrationJob"> | string
    migrationId?: StringWithAggregatesFilter<"MigrationJob"> | string
    userId?: StringWithAggregatesFilter<"MigrationJob"> | string
    fromWallet?: StringWithAggregatesFilter<"MigrationJob"> | string
    toWallet?: StringWithAggregatesFilter<"MigrationJob"> | string
    status?: StringWithAggregatesFilter<"MigrationJob"> | string
    progress?: IntWithAggregatesFilter<"MigrationJob"> | number
    ticketsMigrated?: IntWithAggregatesFilter<"MigrationJob"> | number
    totalTickets?: IntWithAggregatesFilter<"MigrationJob"> | number
    error?: StringNullableWithAggregatesFilter<"MigrationJob"> | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"MigrationJob"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"MigrationJob"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MigrationJob"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    phoneNumber?: string | null
    walletPreference?: string
    custodialWallet?: string | null
    phantomWallet?: string | null
    encryptedSeed?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    walletHistory?: WalletHistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    phoneNumber?: string | null
    walletPreference?: string
    custodialWallet?: string | null
    phantomWallet?: string | null
    encryptedSeed?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    walletHistory?: WalletHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    walletPreference?: StringFieldUpdateOperationsInput | string
    custodialWallet?: NullableStringFieldUpdateOperationsInput | string | null
    phantomWallet?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedSeed?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    walletHistory?: WalletHistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    walletPreference?: StringFieldUpdateOperationsInput | string
    custodialWallet?: NullableStringFieldUpdateOperationsInput | string | null
    phantomWallet?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedSeed?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    walletHistory?: WalletHistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    phoneNumber?: string | null
    walletPreference?: string
    custodialWallet?: string | null
    phantomWallet?: string | null
    encryptedSeed?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    walletPreference?: StringFieldUpdateOperationsInput | string
    custodialWallet?: NullableStringFieldUpdateOperationsInput | string | null
    phantomWallet?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedSeed?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    walletPreference?: StringFieldUpdateOperationsInput | string
    custodialWallet?: NullableStringFieldUpdateOperationsInput | string | null
    phantomWallet?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedSeed?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WalletHistoryCreateInput = {
    id?: string
    action: string
    walletType: string
    walletAddress: string
    metadata?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutWalletHistoryInput
  }

  export type WalletHistoryUncheckedCreateInput = {
    id?: string
    userId: string
    action: string
    walletType: string
    walletAddress: string
    metadata?: string | null
    createdAt?: Date | string
  }

  export type WalletHistoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    walletType?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWalletHistoryNestedInput
  }

  export type WalletHistoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    walletType?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WalletHistoryCreateManyInput = {
    id?: string
    userId: string
    action: string
    walletType: string
    walletAddress: string
    metadata?: string | null
    createdAt?: Date | string
  }

  export type WalletHistoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    walletType?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WalletHistoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    walletType?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MigrationJobCreateInput = {
    id?: string
    migrationId: string
    userId: string
    fromWallet: string
    toWallet: string
    status: string
    progress?: number
    ticketsMigrated?: number
    totalTickets?: number
    error?: string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MigrationJobUncheckedCreateInput = {
    id?: string
    migrationId: string
    userId: string
    fromWallet: string
    toWallet: string
    status: string
    progress?: number
    ticketsMigrated?: number
    totalTickets?: number
    error?: string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MigrationJobUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    migrationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    fromWallet?: StringFieldUpdateOperationsInput | string
    toWallet?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    ticketsMigrated?: IntFieldUpdateOperationsInput | number
    totalTickets?: IntFieldUpdateOperationsInput | number
    error?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MigrationJobUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    migrationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    fromWallet?: StringFieldUpdateOperationsInput | string
    toWallet?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    ticketsMigrated?: IntFieldUpdateOperationsInput | number
    totalTickets?: IntFieldUpdateOperationsInput | number
    error?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MigrationJobCreateManyInput = {
    id?: string
    migrationId: string
    userId: string
    fromWallet: string
    toWallet: string
    status: string
    progress?: number
    ticketsMigrated?: number
    totalTickets?: number
    error?: string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MigrationJobUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    migrationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    fromWallet?: StringFieldUpdateOperationsInput | string
    toWallet?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    ticketsMigrated?: IntFieldUpdateOperationsInput | number
    totalTickets?: IntFieldUpdateOperationsInput | number
    error?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MigrationJobUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    migrationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    fromWallet?: StringFieldUpdateOperationsInput | string
    toWallet?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    ticketsMigrated?: IntFieldUpdateOperationsInput | number
    totalTickets?: IntFieldUpdateOperationsInput | number
    error?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type WalletHistoryListRelationFilter = {
    every?: WalletHistoryWhereInput
    some?: WalletHistoryWhereInput
    none?: WalletHistoryWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type WalletHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    walletPreference?: SortOrder
    custodialWallet?: SortOrder
    phantomWallet?: SortOrder
    encryptedSeed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    walletPreference?: SortOrder
    custodialWallet?: SortOrder
    phantomWallet?: SortOrder
    encryptedSeed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    walletPreference?: SortOrder
    custodialWallet?: SortOrder
    phantomWallet?: SortOrder
    encryptedSeed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type WalletHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    walletType?: SortOrder
    walletAddress?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type WalletHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    walletType?: SortOrder
    walletAddress?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type WalletHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    walletType?: SortOrder
    walletAddress?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type MigrationJobCountOrderByAggregateInput = {
    id?: SortOrder
    migrationId?: SortOrder
    userId?: SortOrder
    fromWallet?: SortOrder
    toWallet?: SortOrder
    status?: SortOrder
    progress?: SortOrder
    ticketsMigrated?: SortOrder
    totalTickets?: SortOrder
    error?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MigrationJobAvgOrderByAggregateInput = {
    progress?: SortOrder
    ticketsMigrated?: SortOrder
    totalTickets?: SortOrder
  }

  export type MigrationJobMaxOrderByAggregateInput = {
    id?: SortOrder
    migrationId?: SortOrder
    userId?: SortOrder
    fromWallet?: SortOrder
    toWallet?: SortOrder
    status?: SortOrder
    progress?: SortOrder
    ticketsMigrated?: SortOrder
    totalTickets?: SortOrder
    error?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MigrationJobMinOrderByAggregateInput = {
    id?: SortOrder
    migrationId?: SortOrder
    userId?: SortOrder
    fromWallet?: SortOrder
    toWallet?: SortOrder
    status?: SortOrder
    progress?: SortOrder
    ticketsMigrated?: SortOrder
    totalTickets?: SortOrder
    error?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MigrationJobSumOrderByAggregateInput = {
    progress?: SortOrder
    ticketsMigrated?: SortOrder
    totalTickets?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type WalletHistoryCreateNestedManyWithoutUserInput = {
    create?: XOR<WalletHistoryCreateWithoutUserInput, WalletHistoryUncheckedCreateWithoutUserInput> | WalletHistoryCreateWithoutUserInput[] | WalletHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WalletHistoryCreateOrConnectWithoutUserInput | WalletHistoryCreateOrConnectWithoutUserInput[]
    createMany?: WalletHistoryCreateManyUserInputEnvelope
    connect?: WalletHistoryWhereUniqueInput | WalletHistoryWhereUniqueInput[]
  }

  export type WalletHistoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WalletHistoryCreateWithoutUserInput, WalletHistoryUncheckedCreateWithoutUserInput> | WalletHistoryCreateWithoutUserInput[] | WalletHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WalletHistoryCreateOrConnectWithoutUserInput | WalletHistoryCreateOrConnectWithoutUserInput[]
    createMany?: WalletHistoryCreateManyUserInputEnvelope
    connect?: WalletHistoryWhereUniqueInput | WalletHistoryWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type WalletHistoryUpdateManyWithoutUserNestedInput = {
    create?: XOR<WalletHistoryCreateWithoutUserInput, WalletHistoryUncheckedCreateWithoutUserInput> | WalletHistoryCreateWithoutUserInput[] | WalletHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WalletHistoryCreateOrConnectWithoutUserInput | WalletHistoryCreateOrConnectWithoutUserInput[]
    upsert?: WalletHistoryUpsertWithWhereUniqueWithoutUserInput | WalletHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WalletHistoryCreateManyUserInputEnvelope
    set?: WalletHistoryWhereUniqueInput | WalletHistoryWhereUniqueInput[]
    disconnect?: WalletHistoryWhereUniqueInput | WalletHistoryWhereUniqueInput[]
    delete?: WalletHistoryWhereUniqueInput | WalletHistoryWhereUniqueInput[]
    connect?: WalletHistoryWhereUniqueInput | WalletHistoryWhereUniqueInput[]
    update?: WalletHistoryUpdateWithWhereUniqueWithoutUserInput | WalletHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WalletHistoryUpdateManyWithWhereWithoutUserInput | WalletHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WalletHistoryScalarWhereInput | WalletHistoryScalarWhereInput[]
  }

  export type WalletHistoryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WalletHistoryCreateWithoutUserInput, WalletHistoryUncheckedCreateWithoutUserInput> | WalletHistoryCreateWithoutUserInput[] | WalletHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WalletHistoryCreateOrConnectWithoutUserInput | WalletHistoryCreateOrConnectWithoutUserInput[]
    upsert?: WalletHistoryUpsertWithWhereUniqueWithoutUserInput | WalletHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WalletHistoryCreateManyUserInputEnvelope
    set?: WalletHistoryWhereUniqueInput | WalletHistoryWhereUniqueInput[]
    disconnect?: WalletHistoryWhereUniqueInput | WalletHistoryWhereUniqueInput[]
    delete?: WalletHistoryWhereUniqueInput | WalletHistoryWhereUniqueInput[]
    connect?: WalletHistoryWhereUniqueInput | WalletHistoryWhereUniqueInput[]
    update?: WalletHistoryUpdateWithWhereUniqueWithoutUserInput | WalletHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WalletHistoryUpdateManyWithWhereWithoutUserInput | WalletHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WalletHistoryScalarWhereInput | WalletHistoryScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutWalletHistoryInput = {
    create?: XOR<UserCreateWithoutWalletHistoryInput, UserUncheckedCreateWithoutWalletHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutWalletHistoryInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutWalletHistoryNestedInput = {
    create?: XOR<UserCreateWithoutWalletHistoryInput, UserUncheckedCreateWithoutWalletHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutWalletHistoryInput
    upsert?: UserUpsertWithoutWalletHistoryInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWalletHistoryInput, UserUpdateWithoutWalletHistoryInput>, UserUncheckedUpdateWithoutWalletHistoryInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type WalletHistoryCreateWithoutUserInput = {
    id?: string
    action: string
    walletType: string
    walletAddress: string
    metadata?: string | null
    createdAt?: Date | string
  }

  export type WalletHistoryUncheckedCreateWithoutUserInput = {
    id?: string
    action: string
    walletType: string
    walletAddress: string
    metadata?: string | null
    createdAt?: Date | string
  }

  export type WalletHistoryCreateOrConnectWithoutUserInput = {
    where: WalletHistoryWhereUniqueInput
    create: XOR<WalletHistoryCreateWithoutUserInput, WalletHistoryUncheckedCreateWithoutUserInput>
  }

  export type WalletHistoryCreateManyUserInputEnvelope = {
    data: WalletHistoryCreateManyUserInput | WalletHistoryCreateManyUserInput[]
  }

  export type WalletHistoryUpsertWithWhereUniqueWithoutUserInput = {
    where: WalletHistoryWhereUniqueInput
    update: XOR<WalletHistoryUpdateWithoutUserInput, WalletHistoryUncheckedUpdateWithoutUserInput>
    create: XOR<WalletHistoryCreateWithoutUserInput, WalletHistoryUncheckedCreateWithoutUserInput>
  }

  export type WalletHistoryUpdateWithWhereUniqueWithoutUserInput = {
    where: WalletHistoryWhereUniqueInput
    data: XOR<WalletHistoryUpdateWithoutUserInput, WalletHistoryUncheckedUpdateWithoutUserInput>
  }

  export type WalletHistoryUpdateManyWithWhereWithoutUserInput = {
    where: WalletHistoryScalarWhereInput
    data: XOR<WalletHistoryUpdateManyMutationInput, WalletHistoryUncheckedUpdateManyWithoutUserInput>
  }

  export type WalletHistoryScalarWhereInput = {
    AND?: WalletHistoryScalarWhereInput | WalletHistoryScalarWhereInput[]
    OR?: WalletHistoryScalarWhereInput[]
    NOT?: WalletHistoryScalarWhereInput | WalletHistoryScalarWhereInput[]
    id?: StringFilter<"WalletHistory"> | string
    userId?: StringFilter<"WalletHistory"> | string
    action?: StringFilter<"WalletHistory"> | string
    walletType?: StringFilter<"WalletHistory"> | string
    walletAddress?: StringFilter<"WalletHistory"> | string
    metadata?: StringNullableFilter<"WalletHistory"> | string | null
    createdAt?: DateTimeFilter<"WalletHistory"> | Date | string
  }

  export type UserCreateWithoutWalletHistoryInput = {
    id?: string
    email: string
    phoneNumber?: string | null
    walletPreference?: string
    custodialWallet?: string | null
    phantomWallet?: string | null
    encryptedSeed?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutWalletHistoryInput = {
    id?: string
    email: string
    phoneNumber?: string | null
    walletPreference?: string
    custodialWallet?: string | null
    phantomWallet?: string | null
    encryptedSeed?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutWalletHistoryInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWalletHistoryInput, UserUncheckedCreateWithoutWalletHistoryInput>
  }

  export type UserUpsertWithoutWalletHistoryInput = {
    update: XOR<UserUpdateWithoutWalletHistoryInput, UserUncheckedUpdateWithoutWalletHistoryInput>
    create: XOR<UserCreateWithoutWalletHistoryInput, UserUncheckedCreateWithoutWalletHistoryInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWalletHistoryInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWalletHistoryInput, UserUncheckedUpdateWithoutWalletHistoryInput>
  }

  export type UserUpdateWithoutWalletHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    walletPreference?: StringFieldUpdateOperationsInput | string
    custodialWallet?: NullableStringFieldUpdateOperationsInput | string | null
    phantomWallet?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedSeed?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutWalletHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    walletPreference?: StringFieldUpdateOperationsInput | string
    custodialWallet?: NullableStringFieldUpdateOperationsInput | string | null
    phantomWallet?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedSeed?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WalletHistoryCreateManyUserInput = {
    id?: string
    action: string
    walletType: string
    walletAddress: string
    metadata?: string | null
    createdAt?: Date | string
  }

  export type WalletHistoryUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    walletType?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WalletHistoryUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    walletType?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WalletHistoryUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    walletType?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}